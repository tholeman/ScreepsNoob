var roleHarvester = require('role.harvester');
var roleUpgrader = require('role.upgrader');
var roleUpgraderN = require('role.upgraderN');
var roleBuilder = require('role.builder');
var roleRepairer = require('role.repairer');
var roleRH = require('role.RH');
var roleScout = require('role.scout');
var roleHarvesterNorth = require('role.harvesterNorth');
var roleTrucker = require('role.trucker');
var roleClaimer = require('role.claimer');
var roleShortHaul = require('role.shortHaul');
var rolePopulationControl = require('role.populationControl');

// var roleDefender = require('role.defender');

const towerRepairFactor = .000030; //**** WALL repair values--> .0000033=1k, .00001=3k, .00002=6k, 0000275=8.4k, .0003=90k
const towerRampartRepairFactor = .0006; //**** @30m hits, .0005=15k
const towerRoadRepairFactor = .75; //**** ROADS/WALLS/RAMPARTS USE WILDLY DIFFERENT FACTORS DUE TO WILDLY DIFFERENT MAX HITS

module.exports.loop = function () {

    var tower1 = Game.getObjectById('5dbc93dbe7edca071c4e77de');
    if(tower1) 
    {
        var closestHostile = tower1.pos.findClosestByRange(FIND_HOSTILE_CREEPS);
        var damagedRoads = tower1.room.find(FIND_STRUCTURES, {
            filter: (structure) => {
            return (structure.structureType == STRUCTURE_ROAD
                    || structure.structureType == STRUCTURE_CONTAINER) 
                    && (structure.hits < structure.hitsMax * towerRoadRepairFactor);}});
            damagedRoads.sort((a,b) => a.hits - b.hits);
        var damagedRamparts = tower1.room.find(FIND_STRUCTURES, {
            filter: (structure) => {
            return (structure.structureType == STRUCTURE_RAMPART) && (structure.hits < structure.hitsMax * towerRampartRepairFactor);}});
            damagedRamparts.sort((a,b) => a.hits - b.hits);
        
        if(closestHostile) 
        {
            tower1.attack(closestHostile);
        }
        else if(damagedRamparts.length) tower1.repair(damagedRamparts[0]);
        else if(damagedRoads.length) tower1.repair(damagedRoads[0]);
        else
        {
            var closestDamagedStructure = tower1.pos.findClosestByRange(FIND_STRUCTURES, 
                {filter: (structure) => structure.hits < structure.hitsMax * towerRepairFactor});
            if(closestDamagedStructure)
            {
                tower1.repair(closestDamagedStructure);
            }
        }
    }

    var tower2 = Game.getObjectById('5dbfddd7e65badb03eeac9a5');
    if(tower2) 
    {
        var closestHostile = tower2.pos.findClosestByRange(FIND_HOSTILE_CREEPS);
        var damagedRoads = tower2.room.find(FIND_STRUCTURES, {
            filter: (structure) => {
            return (structure.structureType == STRUCTURE_ROAD
                    || structure.structureType == STRUCTURE_CONTAINER) 
                    && (structure.hits < structure.hitsMax * towerRoadRepairFactor);}});
            damagedRoads.sort((a,b) => a.hits - b.hits);
        var damagedRamparts = tower2.room.find(FIND_STRUCTURES, {
            filter: (structure) => {
            return (structure.structureType == STRUCTURE_RAMPART) && (structure.hits < structure.hitsMax * towerRampartRepairFactor);}});
            damagedRamparts.sort((a,b) => a.hits - b.hits);
        
        if(closestHostile) 
        {
            tower2.attack(closestHostile);
        }
        else if(damagedRamparts.length) tower2.repair(damagedRamparts[0]);
        else if(damagedRoads.length) tower2.repair(damagedRoads[0]);
        else
        {
            var closestDamagedStructure = tower2.pos.findClosestByRange(FIND_STRUCTURES, 
                {filter: (structure) => structure.hits < structure.hitsMax * towerRepairFactor});
            if(closestDamagedStructure)
            {
                tower2.repair(closestDamagedStructure);
            }
        }
    }

    if(Game.time%5==0) rolePopulationControl.run();

for(var name in Game.creeps) 
    {
        var creep = Game.creeps[name];
        var creepRole = creep.memory.role;

        switch (creepRole) 
        {
            case 'shorthaul':
                roleShortHaul.run(creep);
                break;
            case 'trucker':
                roleTrucker.run(creep);
                break;
            case 'builder':
                roleBuilder.run(creep);
                break;
            case 'repairer':
                roleRepairer.run(creep);
                break;
            case 'remoteharv':
                roleRH.run(creep);
                break;
            case 'harvester':
                roleHarvester.run(creep);
                break;
            case 'upgrader':
                roleUpgrader.run(creep);
                break;
            case 'upgraderN':
                roleUpgraderN.run(creep);
                break;
            case 'harvN':
                roleHarvesterNorth.run(creep);
                break;
            case 'claimer':
                roleClaimer.run(creep);
                break;
            //case 'scout':
            //    roleScout.run(creep);
            //    break;
        }
    }
}


